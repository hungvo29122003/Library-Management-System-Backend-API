const quanLyModel = require('../models/quanLyModel')

class quanLyController {
    async getQuanLy(req, res) {
        try {
            const quanLy = await quanLyModel.getQuanLy()
            console.log(quanLy)
            return res.status(201).json(quanLy)
        }
        catch (err) {
            return res.status(500).json({ message: err.message })
        }
    };
    async getInfomationQuanLy1(req, res) {
        try {
            const { id } = req.params;
            console.log("üìå ID Qu·∫£n L√Ω:", id);
    
            // G·ªçi model ƒë·ªÉ l·∫•y th√¥ng tin qu·∫£n l√Ω
            const infomation = await quanLyModel.getInfomationManager(id);
    
            if (!infomation) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y qu·∫£n l√Ω" });
            }
    
            console.log("üìå Th√¥ng tin Qu·∫£n L√Ω:", infomation);
            return res.status(200).json(infomation);
    
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin Qu·∫£n L√Ω:", error);
            return res.status(500).json({ message: "L·ªói server khi l·∫•y th√¥ng tin Qu·∫£n L√Ω!" });
        }
    };
    async updateManager(req, res) {
        try {
            console.log("üìå Body nh·∫≠n ƒë∆∞·ª£c:", req.body); // Debug
    
            const { id } = req.params;
            const { tenQuanLy, cccd, diaChi, namSinh, sdt, avatar } = req.body;
            console.log(id, tenQuanLy, cccd, diaChi, namSinh, sdt, avatar);
            if (!id) {
                return res.status(400).json({ message: "Thi·∫øu m√£ qu·∫£n l√Ω!" });
            }
    
            // G·ªçi model ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin
            const success = await quanLyModel.updateManagerInfo(
                id, tenQuanLy, cccd, diaChi, namSinh, sdt, avatar
            );
    
            if (success) {
                return res.status(200).json({ message: "C·∫≠p nh·∫≠t th√¥ng tin qu·∫£n l√Ω th√†nh c√¥ng!" });
            }
    
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y qu·∫£n l√Ω!" });
        } catch (error) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t qu·∫£n l√Ω:", error);
            return res.status(500).json({ message: "L·ªói server!", error });
        }
    };
    async getQuanLyByTaiKhoan(req, res){
        try {
            const { maTaiKhoan } = req.params;
            console.log(maTaiKhoan)
            if (!maTaiKhoan) {
                return res.status(400).json({ message: "Thi·∫øu m√£ t√†i kho·∫£n!" });
            }
    
            const quanLy = await quanLyModel.getQuanLyByTaiKhoan(maTaiKhoan);
            if (!quanLy) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y qu·∫£n l√Ω!" });
            }
    
            return res.status(200).json({ maQuanLy: quanLy.maQuanLy });
        } catch (error) {
            console.error("‚ùå L·ªói t√¨m ki·∫øm qu·∫£n l√Ω:", error);
            return res.status(500).json({ message: "L·ªói server!", error });
        }
    };
    async updateQuanLy(req, res) {
        try {
            console.log("üìå Body nh·∫≠n ƒë∆∞·ª£c:", req.body); // Debug

            const { id } = req.params;
            let { tenQuanLy, cccd, diaChi, namSinh, sdt, avatar = null } = req.body;
            console.log(id, tenQuanLy, cccd, diaChi, namSinh, sdt, avatar);

            if (!id) {
                return res.status(400).json({ message: "Thi·∫øu m√£ qu·∫£n l√Ω!" });
            }
            if (!tenQuanLy || !cccd || !diaChi || !namSinh || !sdt) {
                return res.status(400).json({ message: "Thi·∫øu th√¥ng tin c·∫≠p nh·∫≠t!" });
            }
            const success = await quanLyModel.updateQuanLyInfo(
                id, tenQuanLy, cccd, diaChi, namSinh, sdt, avatar
            );

            if (success) {
                return res.status(200).json({ message: "C·∫≠p nh·∫≠t th√¥ng tin qu·∫£n l√Ω th√†nh c√¥ng!" });
            }

            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y qu·∫£n l√Ω!" });
        } catch (error) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t th·ªß th∆∞:", error);
            return res.status(500).json({ message: "L·ªói server!", error });
        }
    };
    async getInfomationQuanLy(req, res) {
        try {
            const { id } = req.params;
            console.log("üìå ID Qu·∫£n l√Ω:", id);

            const infomation = await quanLyModel.getInfomationQuanLy(id);

            if (!infomation) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y qu·∫£n l√Ω" });
            }

            console.log("üìå Th√¥ng tin qu·∫£n l√Ω:", infomation);
            return res.status(200).json(infomation);
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin qu·∫£n l√Ω:", error);
            return res.status(500).json({ message: "L·ªói server khi l·∫•y th√¥ng tin qu·∫£n l√Ω!" });
        }
    }
}

module.exports = new quanLyController